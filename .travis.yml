language: cpp
dist: trusty
sudo: false

git:
  depth: 1

matrix:
  include:

    # Gcov 8 generates a tremendous amount of warnings which gets our job killed.
    - os: linux
      compiler: gcc
      env: GCC_VERSION=7 RENDERER=Null COVERAGE=1
      addons: &gcc7-xcb
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - libopenal-dev
            - libvorbis-dev
            - libxcb-image0-dev
            - libxcb-xkb-dev
            - libxkbcommon-dev
            - libxkbcommon-x11-dev

    - os: linux
      compiler: gcc
      env: GCC_VERSION=8 RENDERER=OpenGL
      addons: &gcc8-x11
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - libopenal-dev
            - libvorbis-dev

    - os: linux
      compiler: gcc
      env: GCC_VERSION=8 RENDERER=Vulkan
      addons: &gcc8-xcb
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - libopenal-dev
            - libvorbis-dev
            - libxcb-image0-dev
            - libxcb-xkb-dev
            - libxkbcommon-dev
            - libxkbcommon-x11-dev

  exclude:

    # Clang with GCC's libstdc++ doesn't work (https://bugs.llvm.org/show_bug.cgi?id=33222).
    # Clang with libc++ also doesn't work (https://bugs.llvm.org/show_bug.cgi?id=33736).
    - os: linux
      compiler: clang
      env: CLANG_VERSION=6.0 RENDERER=Null
      addons: &clang6-x11
        apt:
          sources:
            - llvm-toolchain-trusty-6.0
          packages:
            - clang-6.0
            - libopenal-dev
            - libvorbis-dev

before_install:
  - if [ -n "${CLANG_VERSION}" ]; then export CC=clang-$CLANG_VERSION CXX=clang++-$CLANG_VERSION; fi
  - if [ -n "${GCC_VERSION}" ]; then export CC=gcc-$GCC_VERSION CXX=g++-$GCC_VERSION GCOV=gcov-$GCC_VERSION; fi

install:
  - mkdir ${TRAVIS_BUILD_DIR}/_3rdparty
  - mkdir ${TRAVIS_BUILD_DIR}/_prefix

  - mkdir ${TRAVIS_BUILD_DIR}/_3rdparty/cmake && pushd ${TRAVIS_BUILD_DIR}/_3rdparty/cmake
  - wget -q --no-check-certificate -O - https://cmake.org/files/v3.12/cmake-3.12.0-Linux-x86_64.tar.gz | tar -x --gzip --strip-components 1
  - export PATH=$(pwd)/bin:${PATH}
  - popd

  - if [ -n "${CLANG_VERSION}" ]; then mkdir -p ${TRAVIS_BUILD_DIR}/libcxx/include/c++/v1 ${TRAVIS_BUILD_DIR}/libcxx/lib; fi
  - if [ -n "${CLANG_VERSION}" ]; then export CPLUS_INCLUDE_PATH=${TRAVIS_BUILD_DIR}/libcxx/include/c++/v1:${CPLUS_INCLUDE_PATH}; fi
  - if [ -n "${CLANG_VERSION}" ]; then export LIBRARY_PATH=${TRAVIS_BUILD_DIR}/libcxx/lib:${LIBRARY_PATH}; fi
  - if [ -n "${CLANG_VERSION}" ]; then pushd ${TRAVIS_BUILD_DIR}/_3rdparty; fi
  - if [ -n "${CLANG_VERSION}" ]; then svn co --quiet http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_601/final/ llvm; fi
  - if [ -n "${CLANG_VERSION}" ]; then cd llvm/projects; fi
  - if [ -n "${CLANG_VERSION}" ]; then svn co --quiet http://llvm.org/svn/llvm-project/libcxx/tags/RELEASE_601/final/ libcxx; fi
  - if [ -n "${CLANG_VERSION}" ]; then svn co --quiet http://llvm.org/svn/llvm-project/libcxxabi/tags/RELEASE_601/final libcxxabi; fi
  - if [ -n "${CLANG_VERSION}" ]; then cd ..; fi
  - if [ -n "${CLANG_VERSION}" ]; then mkdir build && cd build; fi
  - if [ -n "${CLANG_VERSION}" ]; then cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=${TRAVIS_BUILD_DIR}/libcxx ..; fi
  - if [ -n "${CLANG_VERSION}" ]; then make cxx; fi
  - if [ -n "${CLANG_VERSION}" ]; then make install-libcxx install-libcxxabi; fi
  - if [ -n "${CLANG_VERSION}" ]; then popd; fi

  - mkdir ${TRAVIS_BUILD_DIR}/_3rdparty/boost && pushd ${TRAVIS_BUILD_DIR}/_3rdparty/boost
  - wget -q -O - https://dl.bintray.com/boostorg/release/1.67.0/source/boost_1_67_0.tar.bz2 | tar -x --bzip2 --strip-components 1
  - ./bootstrap.sh
  - ./b2 -j2 --with-test cxxflags="-Wno-variadic-macros" toolset=gcc variant=debug
  - CMAKE_OPTIONS+=" -DBOOST_ROOT=$(pwd)"
  - popd

  - pushd ${TRAVIS_BUILD_DIR}/_prefix
  - cmake -DBUILD=catch2 -P ../cmake/bootstrap.cmake
  - popd

  - if [ "${RENDERER}" = "Vulkan" ]; then git clone --branch sdk-1.0.65 https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers && pushd Vulkan-LoaderAndValidationLayers; fi
  - if [ "${RENDERER}" = "Vulkan" ]; then cmake -H. -Bdbuild -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=${TRAVIS_BUILD_DIR}/_prefix -DBUILD_DEMOS=OFF -DBUILD_LAYERS=OFF -DBUILD_TESTS=OFF -DBUILD_VKJSON=OFF -DBUILD_WSI_MIR_SUPPORT=OFF -DBUILD_WSI_WAYLAND_SUPPORT=OFF -DBUILD_WSI_XLIB_SUPPORT=OFF; fi
  - if [ "${RENDERER}" = "Vulkan" ]; then cd dbuild; fi
  - if [ "${RENDERER}" = "Vulkan" ]; then make -j2; fi
  - if [ "${RENDERER}" = "Vulkan" ]; then make install; fi
  - if [ "${RENDERER}" = "Vulkan" ]; then popd; fi

  - if [ "${RENDERER}" = "Vulkan" ]; then mkdir ${TRAVIS_BUILD_DIR}/_3rdparty/glslang && pushd ${TRAVIS_BUILD_DIR}/_3rdparty/glslang; fi
  - if [ "${RENDERER}" = "Vulkan" ]; then wget -q -O - https://github.com/KhronosGroup/glslang/archive/6.2.2596.tar.gz | tar -x --gzip --strip-components 1; fi
  - if [ "${RENDERER}" = "Vulkan" ]; then cmake . -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=${TRAVIS_BUILD_DIR}/_prefix -DENABLE_AMD_EXTENSIONS=OFF -DENABLE_GLSLANG_BINARIES=OFF -DENABLE_NV_EXTENSIONS=OFF; fi
  - if [ "${RENDERER}" = "Vulkan" ]; then make -j2; fi
  - if [ "${RENDERER}" = "Vulkan" ]; then make install; fi
  - if [ "${RENDERER}" = "Vulkan" ]; then popd; fi

script:
  - mkdir _build && pushd _build
  - if [ -z "${COVERAGE}" ]; then CMAKE_OPTIONS+=" -DY_BUILD_ALL=ON"; fi
  - if [ -n "${COVERAGE}" ]; then CMAKE_OPTIONS+=" -DY_BUILD_TESTS=ON -DY_COVERAGE=ON"; fi
  - cmake .. -DCMAKE_PREFIX_PATH=${TRAVIS_BUILD_DIR}/_prefix $CMAKE_OPTIONS -DY_RENDERER=$RENDERER
  - cmake --build . -- -j2
  - cmake --build . --target check
  - cmake --build . --target catch
  - popd

after_success:
  - if [ -n "${COVERAGE}" ]; then bash <(curl -s https://codecov.io/bash) -x $GCOV -a "-s `pwd`"; fi

notifications:
  email: false
