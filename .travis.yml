language: cpp
dist: trusty
sudo: false

git:
  depth: 1

matrix:
  include:

    - os: linux
      compiler: gcc
      env: GCC=8 RENDERER=Null Y3=catch2 COVERAGE=1
      addons: &gcc8_xcb
        apt:
          sources: &all_sources
            - llvm-toolchain-trusty-6.0
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - libopenal-dev
            - libvorbis-dev
            - libxcb-image0-dev
            - libxcb-xkb-dev
            - libxkbcommon-dev
            - libxkbcommon-x11-dev

    - os: linux
      compiler: gcc
      env: GCC=8 RENDERER=OpenGL Y3=catch2
      addons: &gcc8_x11
        apt:
          sources: *all_sources
          packages:
            - g++-8
            - libopenal-dev
            - libvorbis-dev

    - os: linux
      compiler: gcc
      env: GCC=8 RENDERER=Vulkan Y3=catch2,glslang,vulkan
      addons: *gcc8_xcb

    - os: linux
      compiler: clang
      env: CLANG=6.0 RENDERER=OpenGL Y3=catch2
      addons: &clang6_x11
        apt:
          sources: *all_sources
          packages:
            - clang-6.0
            - libopenal-dev
            - libstdc++-8-dev
            - libvorbis-dev

    - os: linux
      compiler: clang
      env: CLANG=6.0 RENDERER=Vulkan Y3=catch2,glslang,vulkan
      addons: &clang6_xcb
        apt:
          sources: *all_sources
          packages:
            - clang-6.0
            - libopenal-dev
            - libstdc++-8-dev
            - libvorbis-dev
            - libxcb-image0-dev
            - libxcb-xkb-dev
            - libxkbcommon-dev
            - libxkbcommon-x11-dev

before_install:
  - if [ -n "${CLANG}" ]; then export CC=clang-${CLANG} CXX=clang++-${CLANG}; fi
  - if [ -n "${GCC}" ]; then export CC=gcc-${GCC} CXX=g++-${GCC}; fi

install:
  - mkdir "${HOME}/_cmake" && pushd "${HOME}/_cmake"
  - wget -q --no-check-certificate -O - https://cmake.org/files/v3.12/cmake-3.12.2-Linux-x86_64.tar.gz | tar -x --gzip --strip-components 1
  - export PATH="$(pwd)/bin:${PATH}"
  - popd

  - if [ -z "${COVERAGE}" ]; then Y3_DEBUG="${Y3}"; fi
  - if [ -n "${COVERAGE}" ]; then Y3_DEBUG="${Y3},lcov"; fi
  - mkdir -p "${HOME}/.y3/debug" && pushd "${HOME}/.y3/debug"
  - cmake -DBUILD=${Y3_DEBUG} -DCACHE="${HOME}/.y3/cache" -DCONFIG=Debug -P ${TRAVIS_BUILD_DIR}/bootstrap/get.cmake
  - export PATH="$(pwd)/bin:${PATH}"
  - popd

  - mkdir -p "${HOME}/.y3/release" && pushd "${HOME}/.y3/release"
  - cmake -DBUILD=${Y3} -DCACHE="${HOME}/.y3/cache" -DCONFIG=Release -P ${TRAVIS_BUILD_DIR}/bootstrap/get.cmake
  - export PATH="$(pwd)/bin:${PATH}"
  - popd

script:
  - if [ -z "${COVERAGE}" ]; then CMAKE_OPTIONS="-DY_BUILD_ALL=ON"; fi
  - if [ -n "${COVERAGE}" ]; then CMAKE_OPTIONS="-DY_BUILD_TESTS=ON -DY_COVERAGE=ON -DY_COVERAGE_LCOV=ON"; fi
  - cmake -H. -B"${HOME}/_build.debug" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX="${HOME}/_install.debug" -DCMAKE_PREFIX_PATH="${HOME}/.y3/debug" $CMAKE_OPTIONS -DY_RENDERER=${RENDERER}
  - pushd "${HOME}/_build.debug"
  - cmake --build . -- -j2
  - cmake --build . --target check
  - if [ -n "${COVERAGE}" ]; then cmake --build . --target lcov; fi
  - cmake --build . --target install
  - popd

  - CMAKE_OPTIONS="-DY_BUILD_ALL=ON"
  - cmake -H. -B"${HOME}/_build.release" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${HOME}/_install.release" -DCMAKE_PREFIX_PATH="${HOME}/.y3/release" $CMAKE_OPTIONS -DY_RENDERER=${RENDERER}
  - pushd "${HOME}/_build.release"
  - cmake --build . -- -j2
  - cmake --build . --target check
  - cmake --build . --target install
  - popd

# Codecov doesn't currently support Gcov 8 coverage reports.
#after_success:
#  - if [ -n "${COVERAGE}" ]; then bash <(curl -s https://codecov.io/bash) -x gcov-${GCC} -a "-s `pwd`"; fi

notifications:
  email: false
