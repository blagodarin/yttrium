language: cpp

git:
  depth: 1

matrix:
  include:

    - os: linux
      dist: focal
      compiler: clang
      env: RENDERER=none CLANG=11 CONFIG=Debug ANALYZE=1
      addons:
        apt:
          packages:
            - clang-11
            - clang-format-11
            - clang-tidy-11
            - cppcheck
            - libasound2-dev
            - libstdc++-10-dev
            - libvorbis-dev
            - libxcb-image0-dev
            - libxcb-xkb-dev
            - libxkbcommon-dev
            - libxkbcommon-x11-dev
            - nasm
            - ninja-build

    - os: linux
      dist: focal
      compiler: gcc
      env: RENDERER=vulkan GCC=10 CONFIG=Release
      addons: &vulkan_gcc
        apt:
          packages:
            - g++-10
            - libasound2-dev
            - libvorbis-dev
            - libxcb-image0-dev
            - libxcb-xkb-dev
            - libxkbcommon-dev
            - libxkbcommon-x11-dev
            - ninja-build
            - yasm

    - os: linux
      dist: focal
      compiler: gcc
      env: RENDERER=vulkan GCC=10 CONFIG=Debug
      addons: *vulkan_gcc

    - os: linux
      dist: focal
      compiler: clang
      env: RENDERER=vulkan CLANG=11 CONFIG=Release
      addons: &vulkan_clang
        apt:
          packages:
            - clang-11
            - libasound2-dev
            - libstdc++-10-dev
            - libvorbis-dev
            - libxcb-image0-dev
            - libxcb-xkb-dev
            - libxkbcommon-dev
            - libxkbcommon-x11-dev
            - nasm
            - ninja-build

    - os: linux
      dist: focal
      compiler: clang
      env: RENDERER=vulkan CLANG=11 CONFIG=Debug
      addons: *vulkan_clang

    - os: linux
      dist: focal
      compiler: gcc
      env: RENDERER=opengl GCC=10 CONFIG=Release
      addons: &opengl_gcc
        apt:
          packages:
            - g++-10
            - libasound2-dev
            - libgl-dev
            - libvorbis-dev
            - ninja-build
            - yasm

    - os: linux
      dist: focal
      compiler: gcc
      env: RENDERER=opengl GCC=10 CONFIG=Debug
      addons: *opengl_gcc

    - os: linux
      dist: focal
      compiler: clang
      env: RENDERER=opengl CLANG=11 CONFIG=Release
      addons: &opengl_clang
        apt:
          packages:
            - clang-11
            - libasound2-dev
            - libgl-dev
            - libstdc++-10-dev
            - libvorbis-dev
            - nasm
            - ninja-build

    - os: linux
      dist: focal
      compiler: clang
      env: RENDERER=opengl CLANG=11 CONFIG=Debug
      addons: *opengl_clang

    - os: linux
      dist: focal
      compiler: gcc
      env: RENDERER=none GCC=10 CONFIG=Debug COVERAGE=1
      addons:
        apt:
          packages:
            - g++-10
            - libasound2-dev
            - libvorbis-dev
            - libxcb-image0-dev
            - libxcb-xkb-dev
            - libxkbcommon-dev
            - libxkbcommon-x11-dev
            - ninja-build
            - yasm

before_install:
  - if [ -n "${CLANG}" ]; then export CC=clang-${CLANG} CXX=clang++-${CLANG}; fi
  - if [ -n "${GCC}" ]; then export ASM_NASM=$(which yasm) CC=gcc-${GCC} CXX=g++-${GCC} LDFLAGS=-fuse-ld=gold; fi
  - ${CXX} --version

install:
  - cmake --version
  - mkdir "${HOME}/cmake" && pushd "${HOME}/cmake"
  - wget --output-document=- --quiet https://github.com/Kitware/CMake/releases/download/v3.19.5/cmake-3.19.5-Linux-x86_64.tar.gz | tar -x --gzip --strip-components 1
  - export PATH="$(pwd)/bin:${PATH}"
  - popd
  - cmake --version
  - |
    if [[ "${RENDERER}" == "vulkan" ]]; then
      wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
      sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-focal.list http://packages.lunarg.com/vulkan/lunarg-vulkan-focal.list
      sudo apt update
      sudo apt install vulkan-sdk
    fi
  - if [ -n "${COVERAGE}" ]; then pip install --user codecov; fi

script:
  - if [ -z "${COVERAGE}" ]; then CMAKE_OPTIONS+=" -DYTTRIUM_EXAMPLES=ON"; fi
  - if [ -z "${ANALYZE}" ] && [ -z "${COVERAGE}" ]; then CMAKE_OPTIONS+=" -DYTTRIUM_SANITIZERS=ON"; fi
  - if [ -n "${ANALYZE}" ]; then CMAKE_OPTIONS+=" -DYTTRIUM_CLANG_TIDY=ON"; fi
  - if [ -n "${COVERAGE}" ]; then CMAKE_OPTIONS+=" -DYTTRIUM_COVERAGE=ON"; fi
  - cmake -H. -B"${HOME}/yttrium.build" -G"Ninja" -DCMAKE_BUILD_TYPE=${CONFIG} -DCMAKE_INSTALL_PREFIX="${HOME}/yttrium.install" -DYTTRIUM_RENDERER=${RENDERER} -DYTTRIUM_TESTS=ON ${CMAKE_OPTIONS}
  - if [ -n "${ANALYZE}" ]; then cppcheck --enable=all --error-exitcode=1 --inline-suppr --quiet -I "${TRAVIS_BUILD_DIR}/libs/audio/include" -I "${TRAVIS_BUILD_DIR}/libs/core/include" -I "${TRAVIS_BUILD_DIR}/libs/engine/include" -i "${HOME}/yttrium.build/CMakeFiles" --include="${HOME}/yttrium.build/config.h" --relative-paths="${TRAVIS_BUILD_DIR}" --suppressions-list="${TRAVIS_BUILD_DIR}/.cppcheck-suppress" --template="({file},{line}) ({severity}/{id}) {message}" "${TRAVIS_BUILD_DIR}"; fi
  - if [ -n "${ANALYZE}" ]; then cmake --build "${HOME}/yttrium.build" --target tidy; fi
  - if [ -n "${ANALYZE}" ]; then clang-format-${CLANG} -i $(find ${TRAVIS_BUILD_DIR} -type f \( -name '*.cpp' -o -name '*.h' \) -printf ' %p'); fi
  - if [ -n "${ANALYZE}" ]; then git diff --color=always --exit-code --histogram; fi
  - pushd "${HOME}/yttrium.build"
  - if [ -z "${ANALYZE}" ]; then TERM=dumb cmake --build .; fi
  - if [ -z "${ANALYZE}" ]; then ctest --output-on-failure; fi
  - if [ -z "${ANALYZE}" ] && [ -z "${COVERAGE}" ]; then cmake --build . --target install; fi
  - popd

after_success:
  - if [ -n "${COVERAGE}" ]; then codecov --gcov-root "${HOME}/yttrium.build" --gcov-exec gcov-${GCC} --gcov-args "-s `pwd`"; fi

notifications:
  email: false
