language: cpp
dist: trusty
sudo: false

git:
  depth: 1

matrix:
  include:

    - os: linux
      compiler: gcc
      env: GCC=8 CONFIG=Debug RENDERER=Null Y3=catch2,lcov COVERAGE=1
      addons: &gcc8_xcb
        apt:
          sources: &all_sources
            - llvm-toolchain-trusty-6.0
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - libopenal-dev
            - libvorbis-dev
            - libxcb-image0-dev
            - libxcb-xkb-dev
            - libxkbcommon-dev
            - libxkbcommon-x11-dev

    - os: linux
      compiler: gcc
      env: GCC=8 CONFIG=Release RENDERER=OpenGL Y3=catch2
      addons: &gcc8_x11
        apt:
          sources: *all_sources
          packages:
            - g++-8
            - libopenal-dev
            - libvorbis-dev

    - os: linux
      compiler: gcc
      env: GCC=8 CONFIG=Debug RENDERER=OpenGL Y3=catch2
      addons: *gcc8_x11

    - os: linux
      compiler: gcc
      env: GCC=8 CONFIG=Release RENDERER=Vulkan Y3=catch2,glslang,vulkan
      addons: *gcc8_xcb

    - os: linux
      compiler: gcc
      env: GCC=8 CONFIG=Debug RENDERER=Vulkan Y3=catch2,glslang,vulkan
      addons: *gcc8_xcb

    - os: linux
      compiler: clang
      env: CLANG=6.0 CONFIG=Release RENDERER=OpenGL Y3=catch2
      addons: &clang6_x11
        apt:
          sources: *all_sources
          packages:
            - clang-6.0
            - libopenal-dev
            - libstdc++-8-dev
            - libvorbis-dev

    - os: linux
      compiler: clang
      env: CLANG=6.0 CONFIG=Debug RENDERER=OpenGL Y3=catch2
      addons: *clang6_x11

    - os: linux
      compiler: clang
      env: CLANG=6.0 CONFIG=Release RENDERER=Vulkan Y3=catch2,glslang,vulkan
      addons: &clang6_xcb
        apt:
          sources: *all_sources
          packages:
            - clang-6.0
            - libopenal-dev
            - libstdc++-8-dev
            - libvorbis-dev
            - libxcb-image0-dev
            - libxcb-xkb-dev
            - libxkbcommon-dev
            - libxkbcommon-x11-dev

    - os: linux
      compiler: clang
      env: CLANG=6.0 CONFIG=Debug RENDERER=Vulkan Y3=catch2,glslang,vulkan
      addons: *clang6_xcb

before_install:
  - if [ -n "${CLANG}" ]; then export CC=clang-${CLANG} CXX=clang++-${CLANG}; fi
  - if [ -n "${GCC}" ]; then export CC=gcc-${GCC} CXX=g++-${GCC}; fi

install:
  - mkdir _cmake && pushd _cmake
  - wget -q --no-check-certificate -O - https://cmake.org/files/v3.12/cmake-3.12.2-Linux-x86_64.tar.gz | tar -x --gzip --strip-components 1
  - export PATH="$(pwd)/bin:${PATH}"
  - popd

  - mkdir _prefix && pushd _prefix
  - export PATH="$(pwd)/bin:${PATH}"
  - cmake -DBUILD=${Y3} -DCONFIG=${CONFIG} -P ../bootstrap/get.cmake
  - popd

script:
  - mkdir _build && pushd _build
  - if [ -z "${COVERAGE}" ]; then CMAKE_OPTIONS+=" -DY_BUILD_ALL=ON"; fi
  - if [ -n "${COVERAGE}" ]; then CMAKE_OPTIONS+=" -DY_BUILD_TESTS=ON -DY_COVERAGE=ON -DY_COVERAGE_LCOV=ON"; fi
  - cmake .. -DCMAKE_BUILD_TYPE=${CONFIG} -DCMAKE_INSTALL_PREFIX="${TRAVIS_BUILD_DIR}/_install" -DCMAKE_PREFIX_PATH="${TRAVIS_BUILD_DIR}/_prefix" $CMAKE_OPTIONS -DY_RENDERER=${RENDERER}
  - cmake --build . -- -j2
  - cmake --build . --target check
  - if [ -n "${COVERAGE}" ]; then cmake --build . --target lcov; fi
  - cmake --build . --target install
  - popd

after_success:
  - du --human-readable --max-depth=1 "${TRAVIS_BUILD_DIR}/_install"
  # Codecov doesn't currently support Gcov 8 coverage reports.
  #- if [ -n "${COVERAGE}" ]; then bash <(curl -s https://codecov.io/bash) -x gcov-${GCC} -a "-s `pwd`"; fi

notifications:
  email: false
